<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>两数相加</title>
      <link href="2021/03/09/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>2021/03/09/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>题目描述<a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a></p><h2 id="模拟计算解法"><a href="#模拟计算解法" class="headerlink" title="模拟计算解法"></a>模拟计算解法</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>根据题目描述，我们可以知道两个链表都是逆序存储的，输出结果的链表同样是逆序存储的。这样我们不难想到对两个链表中同一位置的元素进行相加，通过遍历逐位相加得到结果。即两个链表当前位置的数字为<code>x</code>，<code>y</code>相加结果为<code>sum=x+y</code></li><li>在遍历两个链表的过程中，难免会出现两个链表长度不一致的情况，此时我们可以通过在对较短链表前补0的方式使两链表长度一致。如：<code>572+15=572+015=587</code>。</li><li>在逐位相加计算的时候，我们也应当考虑上一位置进位的问题，并在该位置相加计算的结束后，对进位值进行更新。设进位值为<code>carry</code>,则相加结果应为<code>sum=x+y+carry</code>,新的进位值为<code>carry=sum&gt;9?1:0</code>（采用三元表达式求新进位值，为不是采用<code>carry=sum/10</code>是为了减少一次运算从而提高效率）</li><li>两链表相加之后存储在新链表同一位置的数据元素值为<code>sum%10</code>。</li><li>在链表遍历相加结束后，若存在进位值为<code>1</code>，则因在新链表前添加节点，节点值为<code>1</code>，如：<code>75+25=100</code>。</li><li>对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。<h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode pre=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur=pre;</span><br><span class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>||l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=l1==<span class="keyword">null</span>?<span class="number">0</span>:l1.val;</span><br><span class="line">            <span class="keyword">int</span> y=l2==<span class="keyword">null</span>?<span class="number">0</span>:l2.val;</span><br><span class="line">            <span class="keyword">int</span> sum=x+y+carry;</span><br><span class="line">            carry=sum&gt;<span class="number">9</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            sum=sum%<span class="number">10</span>;</span><br><span class="line">            cur.next=<span class="keyword">new</span> ListNode(sum);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            <span class="keyword">if</span> (l1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                l1=l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//链表遍历完carry值为1则，在输出链表尾添加一个节点，节点值为carry</span></span><br><span class="line">        <span class="keyword">if</span> (carry==<span class="number">1</span>)&#123;</span><br><span class="line">            cur.next=<span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度:<code>O(max(m,n))</code>，其中<code>m,n</code>为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要<code>O(1)</code>的时间。<br>空间复杂度：<code>O(max(m,n))</code>。结果链表的长度最多为较长链表的长度<code>+1</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="2021/03/01/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/03/01/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>题目描述见 <a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></p><h2 id="常规方法-暴力解决"><a href="#常规方法-暴力解决" class="headerlink" title="常规方法(暴力解决)"></a>常规方法(暴力解决)</h2><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>根据题目描述，不难想到for循环遍历的方法，通过遍历数组中的每一个数据<code>x</code>，找到数组中是否含有 <code>target-x</code>,同时遍历时需要注意的是每一个位于<code>x</code>之前的元素都已经和<code>x</code>匹配过，因此不需要再进行匹配。<br>而每一个元素不能被使用两次，所以我们只需要在 <code>x</code>后面的元素中寻找<code>target - x</code>。<br><a href="https://github.com/zhuyu126/Leetcode-Ex/blob/master/Leetcode-001/code/Solution1.java">暴力解决代码</a></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：<em>O(N^2)*，其中 *N</em> 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li><li>空间复杂度：*O(1)*。</li></ul><h2 id="使用hash优化暴力解决"><a href="#使用hash优化暴力解决" class="headerlink" title="使用hash优化暴力解决"></a>使用hash优化暴力解决</h2><h3 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h3><p>在暴力解法中，我们能发现在遍历<code>target-x</code>时的开销过大，我们可以采用一个hash表的方式来快速的找到目标元素<code>target-x</code>是否在数组中，从而将查询目标数据的时间复杂度从<em>O(N)</em> 降低到 *O(1)*提高效率。这样创建一个哈希表，对于每一个 <code>x</code>，我们首先查询哈希表中是否存在 <code>target - x</code>，然后将 <code>x</code>插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p><p><a href="https://github.com/zhuyu126/Leetcode-Ex/blob/master/Leetcode-001/code/Solution2.java">hash优化代码</a></p><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li><p>时间复杂度：<code>O(N)</code>，其中<code>N</code>是数组中的元素数量。对于每一个元素<code>x</code>，我们可以<code>O(1)</code>地寻找<code>target - x</code>。</p></li><li><p>空间复杂度：<code>O(N)</code>，其中<code>N</code>是数组中的元素数量。主要为创建哈希表的开销。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 算法 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法教程</title>
      <link href="2020/11/26/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>2020/11/26/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基础语法教程"><a href="#Markdown基础语法教程" class="headerlink" title="Markdown基础语法教程"></a>Markdown基础语法教程</h1><h2 id="Markdown的一些简单基础语法"><a href="#Markdown的一些简单基础语法" class="headerlink" title="Markdown的一些简单基础语法"></a>Markdown的一些简单基础语法</h2><h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">### 四级标题</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="字体效果"><a href="#字体效果" class="headerlink" title="字体效果"></a>字体效果</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="emphasis">_斜体_</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*加粗斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">~~删除线~~</span></span></span></span></span><br></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">行内形式:[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br><span class="line">参考形式:[<span class="string">百度</span>][<span class="symbol">www.baidu.com</span>],国内最大的搜索平台。[<span class="string">谷歌</span>][<span class="symbol">www.google.com</span>]全球最强的搜索平台</span><br><span class="line">自动连接：百度<span class="xml"><span class="tag">&lt;<span class="name">www.baidu.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 无序列表项1</span><br><span class="line"><span class="bullet">+</span> 无序列表项2</span><br><span class="line"><span class="bullet">-</span> 无序列表项3</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表项1</span><br><span class="line"><span class="bullet">2.</span> 有序列表项2</span><br></pre></td></tr></table></figure><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="不指定语言"><a href="#不指定语言" class="headerlink" title="不指定语言"></a>不指定语言</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`println()`</span> 函数</span><br></pre></td></tr></table></figure><h4 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="code">```javascript</span></span><br><span class="line"><span class="code">$(document).ready(function () &#123;</span></span><br><span class="line"><span class="code">    alert(&#x27;RUNOOB&#x27;);</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">http://image.crystallee.top/RabbitMQ的主备模型.png</span>)</span><br></pre></td></tr></table></figure><p><img src="http://image.crystallee.top/RabbitMQ%E7%9A%84%E4%B8%BB%E5%A4%87%E6%A8%A1%E5%9E%8B.png" alt="image"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |  表头   | 表头  |</span><br><span class="line">|  ----  | -----:| :---- | :----: |</span><br><span class="line">| 单元格  | 单元格 | 单元格  | 单元格 |</span><br><span class="line">| 默认左对齐  | 右对齐 | 左对齐  | 居中对齐 |</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
